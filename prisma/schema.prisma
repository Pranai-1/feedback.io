// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  spaces            Space[]

}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Space{
  id            String @id @default(cuid())
  spaceName     String @unique
  userId        String
  image         String
  title         String
  description   String
  customMessage  String
  questions     String[]
  createdAt     DateTime   @default(now())
  collectionType String
  darkTheme      Boolean
  videoButtonText  String
  textButtonText String
  disableCheersImage Boolean
  thankyouTitle  String
  thankyouDescription  String
  reviews        Review[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}


   
model Review{
 id            String @id @default(cuid())
 name          String
 email         String @unique
 photo         String?
 consent       Boolean?
 images        Json?
 reviewText    String
 stars         String
 spaceId       String
 space         Space @relation(fields: [spaceId],references: [id],onDelete:Cascade)
}